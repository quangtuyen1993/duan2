// Generated by Dagger (https://dagger.dev).
package com.example.bookstory.di.module;

import com.example.bookstory.service.FeedApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProviderFeedApiFactory implements Factory<FeedApi> {
  private final RemoteModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RemoteModule_ProviderFeedApiFactory(RemoteModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public FeedApi get() {
    return providerFeedApi(module, retrofitProvider.get());
  }

  public static RemoteModule_ProviderFeedApiFactory create(RemoteModule module,
      Provider<Retrofit> retrofitProvider) {
    return new RemoteModule_ProviderFeedApiFactory(module, retrofitProvider);
  }

  public static FeedApi providerFeedApi(RemoteModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(instance.providerFeedApi(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
