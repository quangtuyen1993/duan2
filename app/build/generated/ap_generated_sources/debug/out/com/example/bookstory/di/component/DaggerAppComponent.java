// Generated by Dagger (https://dagger.dev).
package com.example.bookstory.di.component;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.example.bookstory.BookStoryApp;
import com.example.bookstory.BookStoryApp_MembersInjector;
import com.example.bookstory.dao.BookDAO;
import com.example.bookstory.dao.BookTypeDAO;
import com.example.bookstory.dao.ChapterDAO;
import com.example.bookstory.dao.ContentComicDAO;
import com.example.bookstory.dao.DBLocal;
import com.example.bookstory.dao.HistoryDAO;
import com.example.bookstory.data.response.BookRepository;
import com.example.bookstory.data.response.BookRepository_Factory;
import com.example.bookstory.data.response.BookTypeRepository;
import com.example.bookstory.data.response.BookTypeRepository_Factory;
import com.example.bookstory.data.response.ChapterRepository;
import com.example.bookstory.data.response.ChapterRepository_Factory;
import com.example.bookstory.data.response.ComicChapterRepository;
import com.example.bookstory.data.response.ComicChapterRepository_Factory;
import com.example.bookstory.data.response.FeedRepository;
import com.example.bookstory.data.response.FeedRepository_Factory;
import com.example.bookstory.data.response.HistoryRepository;
import com.example.bookstory.data.response.HistoryRepository_Factory;
import com.example.bookstory.data.response.UserRepository;
import com.example.bookstory.data.response.UserRepository_Factory;
import com.example.bookstory.data.response.UserWrapperRepository;
import com.example.bookstory.data.response.UserWrapperRepository_Factory;
import com.example.bookstory.di.module.ActivityBuilder_ContributesAndroidBookTitleActivity;
import com.example.bookstory.di.module.ActivityBuilder_ContributesAndroidInjection;
import com.example.bookstory.di.module.ActivityBuilder_ContributesComicActivity;
import com.example.bookstory.di.module.ActivityBuilder_ContributesReadBookActivity;
import com.example.bookstory.di.module.ActivityBuilder_ContributesReadBookLocalActivity;
import com.example.bookstory.di.module.DBModule;
import com.example.bookstory.di.module.DBModule_ChapterDAOFactory;
import com.example.bookstory.di.module.DBModule_DbLocalFactory;
import com.example.bookstory.di.module.DBModule_GetBookTypeDAOFactory;
import com.example.bookstory.di.module.DBModule_GetContentDAOFactory;
import com.example.bookstory.di.module.DBModule_GetHistoryDAOFactory;
import com.example.bookstory.di.module.DBModule_ProviderBookDAOFactory;
import com.example.bookstory.di.module.NetWorkModule;
import com.example.bookstory.di.module.NetWorkModule_ProviderRetrofitFactory;
import com.example.bookstory.di.module.RemoteModule;
import com.example.bookstory.di.module.RemoteModule_ProviderBookApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderBookTypeApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderChapterApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderComicChapterApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderFeedApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderHistoryApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderUserApiFactory;
import com.example.bookstory.di.module.RemoteModule_ProviderUserWrapperApiFactory;
import com.example.bookstory.di.module.UserModule;
import com.example.bookstory.di.module.UserModule_UserLocalLoginFactory;
import com.example.bookstory.di.vmFactory.ViewModelFactory;
import com.example.bookstory.service.BookApi;
import com.example.bookstory.service.BookTypeApi;
import com.example.bookstory.service.ChapterApi;
import com.example.bookstory.service.ComicChapterApi;
import com.example.bookstory.service.FeedApi;
import com.example.bookstory.service.HistoryApi;
import com.example.bookstory.service.UserApi;
import com.example.bookstory.service.UserWrapperApi;
import com.example.bookstory.ui.booktitle.BookTitleActivity;
import com.example.bookstory.ui.booktitle.BookTitleActivity_MembersInjector;
import com.example.bookstory.ui.comic.ComicActivity;
import com.example.bookstory.ui.comic.ComicActivity_MembersInjector;
import com.example.bookstory.ui.comic.ComicViewModel;
import com.example.bookstory.ui.comic.ComicViewModel_Factory;
import com.example.bookstory.ui.main.FragmentBuilder_BindBookTitleFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindBookTypeBookFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindBookTypeFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindHistoryFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindHomeFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindLoginFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindReadBookFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindReadBookViewPager;
import com.example.bookstory.ui.main.FragmentBuilder_BindRegisterFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindUserManagerFragment;
import com.example.bookstory.ui.main.FragmentBuilder_BindUserMangerFragment;
import com.example.bookstory.ui.main.MainActivity;
import com.example.bookstory.ui.main.fragment.category.category.BookTypeFragment;
import com.example.bookstory.ui.main.fragment.category.category.BookTypeFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.category.category.BookTypeViewModel;
import com.example.bookstory.ui.main.fragment.category.category.BookTypeViewModel_Factory;
import com.example.bookstory.ui.main.fragment.category.categorybook.BookTypeBookFragment;
import com.example.bookstory.ui.main.fragment.category.categorybook.BookTypeBookFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.category.categorybook.BookTypeBookViewModel;
import com.example.bookstory.ui.main.fragment.category.categorybook.BookTypeBookViewModel_Factory;
import com.example.bookstory.ui.main.fragment.home.home.HomeFragment;
import com.example.bookstory.ui.main.fragment.home.home.HomeFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.home.home.HomeViewModel;
import com.example.bookstory.ui.main.fragment.home.home.HomeViewModel_Factory;
import com.example.bookstory.ui.main.fragment.home.readBook.ReadBookFragment;
import com.example.bookstory.ui.main.fragment.home.readBook.ReadBookFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.home.readBook.ReadBookViewModel;
import com.example.bookstory.ui.main.fragment.home.readBook.ReadBookViewModel_Factory;
import com.example.bookstory.ui.main.fragment.home.readBook.viewpager.ReadBookPagerViewModel;
import com.example.bookstory.ui.main.fragment.home.readBook.viewpager.ReadBookPagerViewModel_Factory;
import com.example.bookstory.ui.main.fragment.home.readBook.viewpager.ReadBookViewPager;
import com.example.bookstory.ui.main.fragment.home.readBook.viewpager.ReadBookViewPager_MembersInjector;
import com.example.bookstory.ui.main.fragment.home.title.BookTitleFragment;
import com.example.bookstory.ui.main.fragment.home.title.BookTitleFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.home.title.BookTitleViewModel;
import com.example.bookstory.ui.main.fragment.home.title.BookTitleViewModel_Factory;
import com.example.bookstory.ui.main.fragment.library.HistoryLibraryFragment;
import com.example.bookstory.ui.main.fragment.library.HistoryLibraryFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.library.HistoryViewModel;
import com.example.bookstory.ui.main.fragment.library.HistoryViewModel_Factory;
import com.example.bookstory.ui.main.fragment.user.login.LoginFragment;
import com.example.bookstory.ui.main.fragment.user.register.RegisterFragment;
import com.example.bookstory.ui.main.fragment.user.register.RegisterFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.user.register.RegisterViewModel;
import com.example.bookstory.ui.main.fragment.user.register.RegisterViewModel_Factory;
import com.example.bookstory.ui.main.fragment.user.userloginmanager.UserLoginManagerFragment;
import com.example.bookstory.ui.main.fragment.user.userloginmanager.UserLoginManagerFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.user.userloginmanager.UserLoginManagerViewModel;
import com.example.bookstory.ui.main.fragment.user.userloginmanager.UserLoginManagerViewModel_Factory;
import com.example.bookstory.ui.main.fragment.user.usermanager.UserManagerFragment;
import com.example.bookstory.ui.main.fragment.user.usermanager.UserManagerFragment_MembersInjector;
import com.example.bookstory.ui.main.fragment.user.usermanager.UserManagerViewModel;
import com.example.bookstory.ui.main.fragment.user.usermanager.UserManagerViewModel_Factory;
import com.example.bookstory.ui.readbook.ReadBookActivity;
import com.example.bookstory.ui.readbook.ReadBookActivity_MembersInjector;
import com.example.bookstory.ui.readbooklocal.ReadBookLocalActivity;
import com.example.bookstory.ui.readbooklocal.ReadBookLocalActivity_MembersInjector;
import com.example.bookstory.ui.readbooklocal.ReadBookLocalViewModel;
import com.example.bookstory.ui.readbooklocal.ReadBookLocalViewModel_Factory;
import com.example.bookstory.vo.UserLocalLogin;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_ContributesAndroidInjection.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ContributesAndroidBookTitleActivity.BookTitleActivitySubcomponent.Factory> bookTitleActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ContributesReadBookActivity.ReadBookActivitySubcomponent.Factory> readBookActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ContributesComicActivity.ComicActivitySubcomponent.Factory> comicActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ContributesReadBookLocalActivity.ReadBookLocalActivitySubcomponent.Factory> readBookLocalActivitySubcomponentFactoryProvider;

  private Provider<Retrofit> providerRetrofitProvider;

  private Provider<BookApi> providerBookApiProvider;

  private Provider<FeedApi> providerFeedApiProvider;

  private Provider<Application> builderProvider;

  private Provider<DBLocal> dbLocalProvider;

  private Provider<BookDAO> providerBookDAOProvider;

  private Provider<ChapterApi> providerChapterApiProvider;

  private Provider<ChapterDAO> chapterDAOProvider;

  private Provider<HistoryApi> providerHistoryApiProvider;

  private Provider<BookTypeApi> providerBookTypeApiProvider;

  private Provider<BookTypeDAO> getBookTypeDAOProvider;

  private Provider<UserLocalLogin> userLocalLoginProvider;

  private Provider<UserWrapperApi> providerUserWrapperApiProvider;

  private Provider<UserApi> providerUserApiProvider;

  private Provider<HistoryDAO> getHistoryDAOProvider;

  private Provider<ComicChapterApi> providerComicChapterApiProvider;

  private Provider<ContentComicDAO> getContentDAOProvider;

  private DaggerAppComponent(RemoteModule remoteModuleParam, DBModule dBModuleParam,
      UserModule userModuleParam, NetWorkModule netWorkModuleParam, Application builderParam) {

    initialize(remoteModuleParam, dBModuleParam, userModuleParam, netWorkModuleParam, builderParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(BookTitleActivity.class, (Provider) bookTitleActivitySubcomponentFactoryProvider).put(ReadBookActivity.class, (Provider) readBookActivitySubcomponentFactoryProvider).put(ComicActivity.class, (Provider) comicActivitySubcomponentFactoryProvider).put(ReadBookLocalActivity.class, (Provider) readBookLocalActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final RemoteModule remoteModuleParam, final DBModule dBModuleParam,
      final UserModule userModuleParam, final NetWorkModule netWorkModuleParam,
      final Application builderParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ContributesAndroidInjection.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ContributesAndroidInjection.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.bookTitleActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ContributesAndroidBookTitleActivity.BookTitleActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ContributesAndroidBookTitleActivity.BookTitleActivitySubcomponent.Factory get(
          ) {
        return new BookTitleActivitySubcomponentFactory();}
    };
    this.readBookActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ContributesReadBookActivity.ReadBookActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ContributesReadBookActivity.ReadBookActivitySubcomponent.Factory get(
          ) {
        return new ReadBookActivitySubcomponentFactory();}
    };
    this.comicActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ContributesComicActivity.ComicActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ContributesComicActivity.ComicActivitySubcomponent.Factory get() {
        return new ComicActivitySubcomponentFactory();}
    };
    this.readBookLocalActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ContributesReadBookLocalActivity.ReadBookLocalActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ContributesReadBookLocalActivity.ReadBookLocalActivitySubcomponent.Factory get(
          ) {
        return new ReadBookLocalActivitySubcomponentFactory();}
    };
    this.providerRetrofitProvider = DoubleCheck.provider(NetWorkModule_ProviderRetrofitFactory.create(netWorkModuleParam));
    this.providerBookApiProvider = RemoteModule_ProviderBookApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.providerFeedApiProvider = RemoteModule_ProviderFeedApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.builderProvider = InstanceFactory.create(builderParam);
    this.dbLocalProvider = DoubleCheck.provider(DBModule_DbLocalFactory.create(dBModuleParam, builderProvider));
    this.providerBookDAOProvider = DoubleCheck.provider(DBModule_ProviderBookDAOFactory.create(dBModuleParam, dbLocalProvider));
    this.providerChapterApiProvider = RemoteModule_ProviderChapterApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.chapterDAOProvider = DoubleCheck.provider(DBModule_ChapterDAOFactory.create(dBModuleParam, dbLocalProvider));
    this.providerHistoryApiProvider = RemoteModule_ProviderHistoryApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.providerBookTypeApiProvider = RemoteModule_ProviderBookTypeApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.getBookTypeDAOProvider = DoubleCheck.provider(DBModule_GetBookTypeDAOFactory.create(dBModuleParam, dbLocalProvider));
    this.userLocalLoginProvider = DoubleCheck.provider(UserModule_UserLocalLoginFactory.create(userModuleParam, builderProvider));
    this.providerUserWrapperApiProvider = RemoteModule_ProviderUserWrapperApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.providerUserApiProvider = RemoteModule_ProviderUserApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.getHistoryDAOProvider = DoubleCheck.provider(DBModule_GetHistoryDAOFactory.create(dBModuleParam, dbLocalProvider));
    this.providerComicChapterApiProvider = RemoteModule_ProviderComicChapterApiFactory.create(remoteModuleParam, providerRetrofitProvider);
    this.getContentDAOProvider = DoubleCheck.provider(DBModule_GetContentDAOFactory.create(dBModuleParam, dbLocalProvider));
  }

  @Override
  public void inject(BookStoryApp arg0) {
    injectBookStoryApp(arg0);}

  @Override
  public void inject(Application application) {
  }

  private BookStoryApp injectBookStoryApp(BookStoryApp instance) {
    BookStoryApp_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application builder;

    @Override
    public Builder builder(Application application) {
      this.builder = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(builder, Application.class);
      return new DaggerAppComponent(new RemoteModule(), new DBModule(), new UserModule(), new NetWorkModule(), builder);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuilder_ContributesAndroidInjection.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ContributesAndroidInjection.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuilder_ContributesAndroidInjection.MainActivitySubcomponent {
    private Provider<FragmentBuilder_BindHomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindBookTitleFragment.BookTitleFragmentSubcomponent.Factory> bookTitleFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindReadBookFragment.ReadBookFragmentSubcomponent.Factory> readBookFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindReadBookViewPager.ReadBookViewPagerSubcomponent.Factory> readBookViewPagerSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindBookTypeFragment.BookTypeFragmentSubcomponent.Factory> bookTypeFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindBookTypeBookFragment.BookTypeBookFragmentSubcomponent.Factory> bookTypeBookFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindLoginFragment.LoginFragmentSubcomponent.Factory> loginFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindUserManagerFragment.UserLoginManagerFragmentSubcomponent.Factory> userLoginManagerFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindUserMangerFragment.UserManagerFragmentSubcomponent.Factory> userManagerFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindRegisterFragment.RegisterFragmentSubcomponent.Factory> registerFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_BindHistoryFragment.HistoryLibraryFragmentSubcomponent.Factory> historyLibraryFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(16).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(BookTitleActivity.class, (Provider) DaggerAppComponent.this.bookTitleActivitySubcomponentFactoryProvider).put(ReadBookActivity.class, (Provider) DaggerAppComponent.this.readBookActivitySubcomponentFactoryProvider).put(ComicActivity.class, (Provider) DaggerAppComponent.this.comicActivitySubcomponentFactoryProvider).put(ReadBookLocalActivity.class, (Provider) DaggerAppComponent.this.readBookLocalActivitySubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(BookTitleFragment.class, (Provider) bookTitleFragmentSubcomponentFactoryProvider).put(ReadBookFragment.class, (Provider) readBookFragmentSubcomponentFactoryProvider).put(ReadBookViewPager.class, (Provider) readBookViewPagerSubcomponentFactoryProvider).put(BookTypeFragment.class, (Provider) bookTypeFragmentSubcomponentFactoryProvider).put(BookTypeBookFragment.class, (Provider) bookTypeBookFragmentSubcomponentFactoryProvider).put(LoginFragment.class, (Provider) loginFragmentSubcomponentFactoryProvider).put(UserLoginManagerFragment.class, (Provider) userLoginManagerFragmentSubcomponentFactoryProvider).put(UserManagerFragment.class, (Provider) userManagerFragmentSubcomponentFactoryProvider).put(RegisterFragment.class, (Provider) registerFragmentSubcomponentFactoryProvider).put(HistoryLibraryFragment.class, (Provider) historyLibraryFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.homeFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindHomeFragment.HomeFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindHomeFragment.HomeFragmentSubcomponent.Factory get() {
          return new HomeFragmentSubcomponentFactory();}
      };
      this.bookTitleFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindBookTitleFragment.BookTitleFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindBookTitleFragment.BookTitleFragmentSubcomponent.Factory get() {
          return new BookTitleFragmentSubcomponentFactory();}
      };
      this.readBookFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindReadBookFragment.ReadBookFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindReadBookFragment.ReadBookFragmentSubcomponent.Factory get() {
          return new ReadBookFragmentSubcomponentFactory();}
      };
      this.readBookViewPagerSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindReadBookViewPager.ReadBookViewPagerSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindReadBookViewPager.ReadBookViewPagerSubcomponent.Factory get() {
          return new ReadBookViewPagerSubcomponentFactory();}
      };
      this.bookTypeFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindBookTypeFragment.BookTypeFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindBookTypeFragment.BookTypeFragmentSubcomponent.Factory get() {
          return new BookTypeFragmentSubcomponentFactory();}
      };
      this.bookTypeBookFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindBookTypeBookFragment.BookTypeBookFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindBookTypeBookFragment.BookTypeBookFragmentSubcomponent.Factory get(
            ) {
          return new BookTypeBookFragmentSubcomponentFactory();}
      };
      this.loginFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindLoginFragment.LoginFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindLoginFragment.LoginFragmentSubcomponent.Factory get() {
          return new LoginFragmentSubcomponentFactory();}
      };
      this.userLoginManagerFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindUserManagerFragment.UserLoginManagerFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindUserManagerFragment.UserLoginManagerFragmentSubcomponent.Factory get(
            ) {
          return new UserLoginManagerFragmentSubcomponentFactory();}
      };
      this.userManagerFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindUserMangerFragment.UserManagerFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindUserMangerFragment.UserManagerFragmentSubcomponent.Factory get(
            ) {
          return new UserManagerFragmentSubcomponentFactory();}
      };
      this.registerFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindRegisterFragment.RegisterFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindRegisterFragment.RegisterFragmentSubcomponent.Factory get() {
          return new RegisterFragmentSubcomponentFactory();}
      };
      this.historyLibraryFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilder_BindHistoryFragment.HistoryLibraryFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuilder_BindHistoryFragment.HistoryLibraryFragmentSubcomponent.Factory get(
            ) {
          return new HistoryLibraryFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class HomeFragmentSubcomponentFactory implements FragmentBuilder_BindHomeFragment.HomeFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindHomeFragment.HomeFragmentSubcomponent create(HomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl implements FragmentBuilder_BindHomeFragment.HomeFragmentSubcomponent {
      private Provider<BookRepository> bookRepositoryProvider;

      private Provider<FeedRepository> feedRepositoryProvider;

      private Provider<HomeViewModel> homeViewModelProvider;

      private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(HomeViewModel.class, (Provider) homeViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final HomeFragment arg0) {
        this.bookRepositoryProvider = BookRepository_Factory.create(DaggerAppComponent.this.providerBookApiProvider, DaggerAppComponent.this.providerFeedApiProvider, DaggerAppComponent.this.providerBookDAOProvider);
        this.feedRepositoryProvider = FeedRepository_Factory.create(DaggerAppComponent.this.providerFeedApiProvider);
        this.homeViewModelProvider = HomeViewModel_Factory.create(bookRepositoryProvider, DaggerAppComponent.this.providerBookDAOProvider, feedRepositoryProvider);
      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);}

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        HomeFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        HomeFragment_MembersInjector.injectBookDAO(instance, DaggerAppComponent.this.providerBookDAOProvider.get());
        return instance;
      }
    }

    private final class BookTitleFragmentSubcomponentFactory implements FragmentBuilder_BindBookTitleFragment.BookTitleFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindBookTitleFragment.BookTitleFragmentSubcomponent create(
          BookTitleFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BookTitleFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BookTitleFragmentSubcomponentImpl implements FragmentBuilder_BindBookTitleFragment.BookTitleFragmentSubcomponent {
      private BookTitleFragmentSubcomponentImpl(BookTitleFragment arg0) {

      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(BookTitleViewModel.class, (Provider) BookTitleViewModel_Factory.create());}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @Override
      public void inject(BookTitleFragment arg0) {
        injectBookTitleFragment(arg0);}

      private BookTitleFragment injectBookTitleFragment(BookTitleFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BookTitleFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class ReadBookFragmentSubcomponentFactory implements FragmentBuilder_BindReadBookFragment.ReadBookFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindReadBookFragment.ReadBookFragmentSubcomponent create(
          ReadBookFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ReadBookFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ReadBookFragmentSubcomponentImpl implements FragmentBuilder_BindReadBookFragment.ReadBookFragmentSubcomponent {
      private Provider<ChapterRepository> chapterRepositoryProvider;

      private Provider<ReadBookViewModel> readBookViewModelProvider;

      private ReadBookFragmentSubcomponentImpl(ReadBookFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ReadBookViewModel.class, (Provider) readBookViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ReadBookFragment arg0) {
        this.chapterRepositoryProvider = ChapterRepository_Factory.create(DaggerAppComponent.this.providerChapterApiProvider, DaggerAppComponent.this.chapterDAOProvider, DaggerAppComponent.this.providerHistoryApiProvider);
        this.readBookViewModelProvider = ReadBookViewModel_Factory.create(chapterRepositoryProvider);
      }

      @Override
      public void inject(ReadBookFragment arg0) {
        injectReadBookFragment(arg0);}

      private ReadBookFragment injectReadBookFragment(ReadBookFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ReadBookFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class ReadBookViewPagerSubcomponentFactory implements FragmentBuilder_BindReadBookViewPager.ReadBookViewPagerSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindReadBookViewPager.ReadBookViewPagerSubcomponent create(
          ReadBookViewPager arg0) {
        Preconditions.checkNotNull(arg0);
        return new ReadBookViewPagerSubcomponentImpl(arg0);
      }
    }

    private final class ReadBookViewPagerSubcomponentImpl implements FragmentBuilder_BindReadBookViewPager.ReadBookViewPagerSubcomponent {
      private Provider<ChapterRepository> chapterRepositoryProvider;

      private Provider<ReadBookPagerViewModel> readBookPagerViewModelProvider;

      private ReadBookViewPagerSubcomponentImpl(ReadBookViewPager arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ReadBookPagerViewModel.class, (Provider) readBookPagerViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ReadBookViewPager arg0) {
        this.chapterRepositoryProvider = ChapterRepository_Factory.create(DaggerAppComponent.this.providerChapterApiProvider, DaggerAppComponent.this.chapterDAOProvider, DaggerAppComponent.this.providerHistoryApiProvider);
        this.readBookPagerViewModelProvider = ReadBookPagerViewModel_Factory.create(chapterRepositoryProvider);
      }

      @Override
      public void inject(ReadBookViewPager arg0) {
        injectReadBookViewPager(arg0);}

      private ReadBookViewPager injectReadBookViewPager(ReadBookViewPager instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ReadBookViewPager_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class BookTypeFragmentSubcomponentFactory implements FragmentBuilder_BindBookTypeFragment.BookTypeFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindBookTypeFragment.BookTypeFragmentSubcomponent create(
          BookTypeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BookTypeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BookTypeFragmentSubcomponentImpl implements FragmentBuilder_BindBookTypeFragment.BookTypeFragmentSubcomponent {
      private Provider<BookTypeRepository> bookTypeRepositoryProvider;

      private Provider<BookTypeViewModel> bookTypeViewModelProvider;

      private BookTypeFragmentSubcomponentImpl(BookTypeFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(BookTypeViewModel.class, (Provider) bookTypeViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final BookTypeFragment arg0) {
        this.bookTypeRepositoryProvider = BookTypeRepository_Factory.create(DaggerAppComponent.this.providerBookTypeApiProvider, DaggerAppComponent.this.getBookTypeDAOProvider);
        this.bookTypeViewModelProvider = BookTypeViewModel_Factory.create(bookTypeRepositoryProvider);
      }

      @Override
      public void inject(BookTypeFragment arg0) {
        injectBookTypeFragment(arg0);}

      private BookTypeFragment injectBookTypeFragment(BookTypeFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BookTypeFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class BookTypeBookFragmentSubcomponentFactory implements FragmentBuilder_BindBookTypeBookFragment.BookTypeBookFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindBookTypeBookFragment.BookTypeBookFragmentSubcomponent create(
          BookTypeBookFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BookTypeBookFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BookTypeBookFragmentSubcomponentImpl implements FragmentBuilder_BindBookTypeBookFragment.BookTypeBookFragmentSubcomponent {
      private Provider<BookRepository> bookRepositoryProvider;

      private Provider<BookTypeBookViewModel> bookTypeBookViewModelProvider;

      private BookTypeBookFragmentSubcomponentImpl(BookTypeBookFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(BookTypeBookViewModel.class, (Provider) bookTypeBookViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final BookTypeBookFragment arg0) {
        this.bookRepositoryProvider = BookRepository_Factory.create(DaggerAppComponent.this.providerBookApiProvider, DaggerAppComponent.this.providerFeedApiProvider, DaggerAppComponent.this.providerBookDAOProvider);
        this.bookTypeBookViewModelProvider = BookTypeBookViewModel_Factory.create(bookRepositoryProvider);
      }

      @Override
      public void inject(BookTypeBookFragment arg0) {
        injectBookTypeBookFragment(arg0);}

      private BookTypeBookFragment injectBookTypeBookFragment(BookTypeBookFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BookTypeBookFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class LoginFragmentSubcomponentFactory implements FragmentBuilder_BindLoginFragment.LoginFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindLoginFragment.LoginFragmentSubcomponent create(
          LoginFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LoginFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LoginFragmentSubcomponentImpl implements FragmentBuilder_BindLoginFragment.LoginFragmentSubcomponent {
      private LoginFragmentSubcomponentImpl(LoginFragment arg0) {

      }

      @Override
      public void inject(LoginFragment arg0) {
        injectLoginFragment(arg0);}

      private LoginFragment injectLoginFragment(LoginFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class UserLoginManagerFragmentSubcomponentFactory implements FragmentBuilder_BindUserManagerFragment.UserLoginManagerFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindUserManagerFragment.UserLoginManagerFragmentSubcomponent create(
          UserLoginManagerFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new UserLoginManagerFragmentSubcomponentImpl(arg0);
      }
    }

    private final class UserLoginManagerFragmentSubcomponentImpl implements FragmentBuilder_BindUserManagerFragment.UserLoginManagerFragmentSubcomponent {
      private Provider<UserWrapperRepository> userWrapperRepositoryProvider;

      private Provider<UserLoginManagerViewModel> userLoginManagerViewModelProvider;

      private UserLoginManagerFragmentSubcomponentImpl(UserLoginManagerFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(UserLoginManagerViewModel.class, (Provider) userLoginManagerViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final UserLoginManagerFragment arg0) {
        this.userWrapperRepositoryProvider = UserWrapperRepository_Factory.create(DaggerAppComponent.this.providerUserWrapperApiProvider);
        this.userLoginManagerViewModelProvider = UserLoginManagerViewModel_Factory.create(userWrapperRepositoryProvider);
      }

      @Override
      public void inject(UserLoginManagerFragment arg0) {
        injectUserLoginManagerFragment(arg0);}

      private UserLoginManagerFragment injectUserLoginManagerFragment(
          UserLoginManagerFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        UserLoginManagerFragment_MembersInjector.injectUserLocalLogin(instance, DaggerAppComponent.this.userLocalLoginProvider.get());
        UserLoginManagerFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class UserManagerFragmentSubcomponentFactory implements FragmentBuilder_BindUserMangerFragment.UserManagerFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindUserMangerFragment.UserManagerFragmentSubcomponent create(
          UserManagerFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new UserManagerFragmentSubcomponentImpl(arg0);
      }
    }

    private final class UserManagerFragmentSubcomponentImpl implements FragmentBuilder_BindUserMangerFragment.UserManagerFragmentSubcomponent {
      private Provider<UserRepository> userRepositoryProvider;

      private Provider<UserManagerViewModel> userManagerViewModelProvider;

      private UserManagerFragmentSubcomponentImpl(UserManagerFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(UserManagerViewModel.class, (Provider) userManagerViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final UserManagerFragment arg0) {
        this.userRepositoryProvider = UserRepository_Factory.create(DaggerAppComponent.this.providerUserApiProvider);
        this.userManagerViewModelProvider = UserManagerViewModel_Factory.create(userRepositoryProvider, DaggerAppComponent.this.userLocalLoginProvider);
      }

      @Override
      public void inject(UserManagerFragment arg0) {
        injectUserManagerFragment(arg0);}

      private UserManagerFragment injectUserManagerFragment(UserManagerFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        UserManagerFragment_MembersInjector.injectUserLocalLogin(instance, DaggerAppComponent.this.userLocalLoginProvider.get());
        UserManagerFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class RegisterFragmentSubcomponentFactory implements FragmentBuilder_BindRegisterFragment.RegisterFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindRegisterFragment.RegisterFragmentSubcomponent create(
          RegisterFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RegisterFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RegisterFragmentSubcomponentImpl implements FragmentBuilder_BindRegisterFragment.RegisterFragmentSubcomponent {
      private Provider<UserWrapperRepository> userWrapperRepositoryProvider;

      private Provider<RegisterViewModel> registerViewModelProvider;

      private RegisterFragmentSubcomponentImpl(RegisterFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(RegisterViewModel.class, (Provider) registerViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final RegisterFragment arg0) {
        this.userWrapperRepositoryProvider = UserWrapperRepository_Factory.create(DaggerAppComponent.this.providerUserWrapperApiProvider);
        this.registerViewModelProvider = RegisterViewModel_Factory.create(userWrapperRepositoryProvider);
      }

      @Override
      public void inject(RegisterFragment arg0) {
        injectRegisterFragment(arg0);}

      private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        RegisterFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class HistoryLibraryFragmentSubcomponentFactory implements FragmentBuilder_BindHistoryFragment.HistoryLibraryFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_BindHistoryFragment.HistoryLibraryFragmentSubcomponent create(
          HistoryLibraryFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HistoryLibraryFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HistoryLibraryFragmentSubcomponentImpl implements FragmentBuilder_BindHistoryFragment.HistoryLibraryFragmentSubcomponent {
      private Provider<HistoryRepository> historyRepositoryProvider;

      private Provider<ChapterRepository> chapterRepositoryProvider;

      private Provider<HistoryViewModel> historyViewModelProvider;

      private HistoryLibraryFragmentSubcomponentImpl(HistoryLibraryFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(HistoryViewModel.class, (Provider) historyViewModelProvider);}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final HistoryLibraryFragment arg0) {
        this.historyRepositoryProvider = HistoryRepository_Factory.create(DaggerAppComponent.this.providerHistoryApiProvider, DaggerAppComponent.this.getHistoryDAOProvider);
        this.chapterRepositoryProvider = ChapterRepository_Factory.create(DaggerAppComponent.this.providerChapterApiProvider, DaggerAppComponent.this.chapterDAOProvider, DaggerAppComponent.this.providerHistoryApiProvider);
        this.historyViewModelProvider = HistoryViewModel_Factory.create(historyRepositoryProvider, chapterRepositoryProvider);
      }

      @Override
      public void inject(HistoryLibraryFragment arg0) {
        injectHistoryLibraryFragment(arg0);}

      private HistoryLibraryFragment injectHistoryLibraryFragment(HistoryLibraryFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        HistoryLibraryFragment_MembersInjector.injectFactory(instance, getViewModelFactory());
        HistoryLibraryFragment_MembersInjector.injectUserLocalLogin(instance, DaggerAppComponent.this.userLocalLoginProvider.get());
        return instance;
      }
    }
  }

  private final class BookTitleActivitySubcomponentFactory implements ActivityBuilder_ContributesAndroidBookTitleActivity.BookTitleActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ContributesAndroidBookTitleActivity.BookTitleActivitySubcomponent create(
        BookTitleActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new BookTitleActivitySubcomponentImpl(arg0);
    }
  }

  private final class BookTitleActivitySubcomponentImpl implements ActivityBuilder_ContributesAndroidBookTitleActivity.BookTitleActivitySubcomponent {
    private Provider<BookTitleActivity> arg0Provider;

    private Provider<com.example.bookstory.ui.booktitle.BookTitleViewModel> bookTitleViewModelProvider;

    private BookTitleActivitySubcomponentImpl(BookTitleActivity arg0Param) {

      initialize(arg0Param);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(com.example.bookstory.ui.booktitle.BookTitleViewModel.class, (Provider) bookTitleViewModelProvider);}

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final BookTitleActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bookTitleViewModelProvider = com.example.bookstory.ui.booktitle.BookTitleViewModel_Factory.create(arg0Provider);
    }

    @Override
    public void inject(BookTitleActivity arg0) {
      injectBookTitleActivity(arg0);}

    private BookTitleActivity injectBookTitleActivity(BookTitleActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BookTitleActivity_MembersInjector.injectFactory(instance, getViewModelFactory());
      return instance;
    }
  }

  private final class ReadBookActivitySubcomponentFactory implements ActivityBuilder_ContributesReadBookActivity.ReadBookActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ContributesReadBookActivity.ReadBookActivitySubcomponent create(
        ReadBookActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ReadBookActivitySubcomponentImpl(arg0);
    }
  }

  private final class ReadBookActivitySubcomponentImpl implements ActivityBuilder_ContributesReadBookActivity.ReadBookActivitySubcomponent {
    private Provider<ChapterRepository> chapterRepositoryProvider;

    private Provider<com.example.bookstory.ui.readbook.ReadBookViewModel> readBookViewModelProvider;

    private ReadBookActivitySubcomponentImpl(ReadBookActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(com.example.bookstory.ui.readbook.ReadBookViewModel.class, (Provider) readBookViewModelProvider);}

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final ReadBookActivity arg0) {
      this.chapterRepositoryProvider = ChapterRepository_Factory.create(DaggerAppComponent.this.providerChapterApiProvider, DaggerAppComponent.this.chapterDAOProvider, DaggerAppComponent.this.providerHistoryApiProvider);
      this.readBookViewModelProvider = com.example.bookstory.ui.readbook.ReadBookViewModel_Factory.create(chapterRepositoryProvider, DaggerAppComponent.this.userLocalLoginProvider);
    }

    @Override
    public void inject(ReadBookActivity arg0) {
      injectReadBookActivity(arg0);}

    private ReadBookActivity injectReadBookActivity(ReadBookActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      ReadBookActivity_MembersInjector.injectFactory(instance, getViewModelFactory());
      return instance;
    }
  }

  private final class ComicActivitySubcomponentFactory implements ActivityBuilder_ContributesComicActivity.ComicActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ContributesComicActivity.ComicActivitySubcomponent create(
        ComicActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ComicActivitySubcomponentImpl(arg0);
    }
  }

  private final class ComicActivitySubcomponentImpl implements ActivityBuilder_ContributesComicActivity.ComicActivitySubcomponent {
    private Provider<ComicChapterRepository> comicChapterRepositoryProvider;

    private Provider<ComicViewModel> comicViewModelProvider;

    private ComicActivitySubcomponentImpl(ComicActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ComicViewModel.class, (Provider) comicViewModelProvider);}

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final ComicActivity arg0) {
      this.comicChapterRepositoryProvider = ComicChapterRepository_Factory.create(DaggerAppComponent.this.providerComicChapterApiProvider, DaggerAppComponent.this.getContentDAOProvider);
      this.comicViewModelProvider = ComicViewModel_Factory.create(comicChapterRepositoryProvider);
    }

    @Override
    public void inject(ComicActivity arg0) {
      injectComicActivity(arg0);}

    private ComicActivity injectComicActivity(ComicActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      ComicActivity_MembersInjector.injectFactory(instance, getViewModelFactory());
      return instance;
    }
  }

  private final class ReadBookLocalActivitySubcomponentFactory implements ActivityBuilder_ContributesReadBookLocalActivity.ReadBookLocalActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ContributesReadBookLocalActivity.ReadBookLocalActivitySubcomponent create(
        ReadBookLocalActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ReadBookLocalActivitySubcomponentImpl(arg0);
    }
  }

  private final class ReadBookLocalActivitySubcomponentImpl implements ActivityBuilder_ContributesReadBookLocalActivity.ReadBookLocalActivitySubcomponent {
    private Provider<ChapterRepository> chapterRepositoryProvider;

    private Provider<ReadBookLocalViewModel> readBookLocalViewModelProvider;

    private ReadBookLocalActivitySubcomponentImpl(ReadBookLocalActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ReadBookLocalViewModel.class, (Provider) readBookLocalViewModelProvider);}

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final ReadBookLocalActivity arg0) {
      this.chapterRepositoryProvider = ChapterRepository_Factory.create(DaggerAppComponent.this.providerChapterApiProvider, DaggerAppComponent.this.chapterDAOProvider, DaggerAppComponent.this.providerHistoryApiProvider);
      this.readBookLocalViewModelProvider = ReadBookLocalViewModel_Factory.create(chapterRepositoryProvider);
    }

    @Override
    public void inject(ReadBookLocalActivity arg0) {
      injectReadBookLocalActivity(arg0);}

    private ReadBookLocalActivity injectReadBookLocalActivity(ReadBookLocalActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      ReadBookLocalActivity_MembersInjector.injectFactory(instance, getViewModelFactory());
      return instance;
    }
  }
}
