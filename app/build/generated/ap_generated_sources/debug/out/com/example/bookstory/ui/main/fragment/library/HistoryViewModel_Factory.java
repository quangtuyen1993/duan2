// Generated by Dagger (https://dagger.dev).
package com.example.bookstory.ui.main.fragment.library;

import com.example.bookstory.data.response.ChapterRepository;
import com.example.bookstory.data.response.HistoryRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HistoryViewModel_Factory implements Factory<HistoryViewModel> {
  private final Provider<HistoryRepository> historyRepositoryProvider;

  private final Provider<ChapterRepository> chapterRepositoryProvider;

  public HistoryViewModel_Factory(Provider<HistoryRepository> historyRepositoryProvider,
      Provider<ChapterRepository> chapterRepositoryProvider) {
    this.historyRepositoryProvider = historyRepositoryProvider;
    this.chapterRepositoryProvider = chapterRepositoryProvider;
  }

  @Override
  public HistoryViewModel get() {
    return newInstance(historyRepositoryProvider.get(), chapterRepositoryProvider.get());
  }

  public static HistoryViewModel_Factory create(
      Provider<HistoryRepository> historyRepositoryProvider,
      Provider<ChapterRepository> chapterRepositoryProvider) {
    return new HistoryViewModel_Factory(historyRepositoryProvider, chapterRepositoryProvider);
  }

  public static HistoryViewModel newInstance(HistoryRepository historyRepository,
      ChapterRepository chapterRepository) {
    return new HistoryViewModel(historyRepository, chapterRepository);
  }
}
